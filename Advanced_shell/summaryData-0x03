#!/bin/bash

# Pokemon Data Summary Script
# Reads JSON files and generates CSV report with statistics
# Extracts name, height, and weight data for analysis

# Configuration
INPUT_DIR="pokemon_data"
OUTPUT_CSV="pokemon_report.csv"
TEMP_DATA="temp_pokemon_data.txt"
ERROR_LOG="summary_errors.txt"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Function to print colored output
print_color() {
    local color=$1
    local message=$2
    echo -e "${color}${message}${NC}"
}

# Function to log errors
log_error() {
    local error_message="$1"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo "[$timestamp] ERROR: $error_message" >> "$ERROR_LOG"
}

# Function to check if required tools are available
check_prerequisites() {
    local missing_tools=()
    
    if ! command -v jq >/dev/null 2>&1; then
        missing_tools+=("jq")
    fi
    
    if ! command -v awk >/dev/null 2>&1; then
        missing_tools+=("awk")
    fi
    
    if [ ${#missing_tools[@]} -gt 0 ]; then
        print_color "$RED" "‚ùå Missing required tools: ${missing_tools[*]}"
        print_color "$YELLOW" "üí° Install with:"
        for tool in "${missing_tools[@]}"; do
            case $tool in
                jq) echo "   sudo apt-get install jq (Ubuntu/Debian)" ;;
                awk) echo "   awk is usually pre-installed, check your system" ;;
            esac
        done
        return 1
    fi
    
    return 0
}

# Function to validate JSON file
validate_json_file() {
    local file_path="$1"
    local pokemon_name=$(basename "$file_path" .json)
    
    if [ ! -f "$file_path" ]; then
        log_error "File not found: $file_path"
        return 1
    fi
    
    if ! jq empty "$file_path" 2>/dev/null; then
        log_error "Invalid JSON format in: $file_path"
        return 1
    fi
    
    # Check if required fields exist
    local name=$(jq -r '.name // empty' "$file_path" 2>/dev/null)
    local height=$(jq -r '.height // empty' "$file_path" 2>/dev/null)
    local weight=$(jq -r '.weight // empty' "$file_path" 2>/dev/null)
    
    if [ -z "$name" ] || [ -z "$height" ] || [ -z "$weight" ]; then
        log_error "Missing required fields (name, height, weight) in: $file_path"
        return 1
    fi
    
    return 0
}

# Function to extract Pokemon data from JSON file
extract_pokemon_data() {
    local file_path="$1"
    local pokemon_name=$(basename "$file_path" .json)
    
    print_color "$CYAN" "üìä Processing: $pokemon_name"
    
    if ! validate_json_file "$file_path"; then
        print_color "$RED" "   ‚ùå Skipping invalid file: $file_path"
        return 1
    fi
    
    # Extract data using jq
    local name=$(jq -r '.name' "$file_path" 2>/dev/null)
    local height=$(jq -r '.height' "$file_path" 2>/dev/null)
    local weight=$(jq -r '.weight' "$file_path" 2>/dev/null)
    
    # Convert height from decimeters to meters (Pokemon API uses decimeters)
    local height_m=$(echo "$height" | awk '{printf "%.1f", $1/10}')
    
    # Convert weight from hectograms to kilograms (Pokemon API uses hectograms)
    local weight_kg=$(echo "$weight" | awk '{printf "%.1f", $1/10}')
    
    # Capitalize first letter of name
    local formatted_name=$(echo "$name" | awk '{print toupper(substr($0,1,1)) tolower(substr($0,2))}')
    
    # Output data to temp file for processing
    echo "$formatted_name,$height_m,$weight_kg" >> "$TEMP_DATA"
    
    print_color "$GREEN" "   ‚úÖ Extracted: $formatted_name (${height_m}m, ${weight_kg}kg)"
    
    return 0
}

# Function to generate CSV report
generate_csv_report() {
    print_color "$BLUE" "üìù Generating CSV report..."
    
    # Create CSV header
    echo "Name,Height (m),Weight (kg)" > "$OUTPUT_CSV"
    
    # Sort data by name and append to CSV
    if [ -f "$TEMP_DATA" ]; then
        sort "$TEMP_DATA" >> "$OUTPUT_CSV"
        print_color "$GREEN" "‚úÖ CSV Report generated at: $OUTPUT_CSV"
        echo ""
        
        # Display the CSV content
        cat "$OUTPUT_CSV"
        echo ""
    else
        log_error "No data found to generate CSV report"
        print_color "$RED" "‚ùå No data available for CSV generation"
        return 1
    fi
}

# Function to calculate statistics using awk
calculate_statistics() {
    print_color "$BLUE" "üßÆ Calculating statistics..."
    
    if [ ! -f "$TEMP_DATA" ] || [ ! -s "$TEMP_DATA" ]; then
        log_error "No data available for statistics calculation"
        print_color "$RED" "‚ùå No data available for statistics"
        return 1
    fi
    
    # Use awk to calculate averages
    awk -F',' '
    BEGIN {
        total_height = 0
        total_weight = 0
        count = 0
        printf "üìä Statistical Analysis:\n"
        printf "========================\n"
    }
    {
        total_height += $2
        total_weight += $3
        count++
        printf "%-12s: Height = %6.1f m, Weight = %6.1f kg\n", $1, $2, $3
    }
    END {
        if (count > 0) {
            avg_height = total_height / count
            avg_weight = total_weight / count
            printf "\nüìà Summary Statistics:\n"
            printf "=====================\n"
            printf "Total Pokemon: %d\n", count
            printf "Average Height: %.2f m\n", avg_height
            printf "Average Weight: %.2f kg\n", avg_weight
            printf "\nüìä Additional Stats:\n"
            printf "===================\n"
            printf "Total Height: %.2f m\n", total_height
            printf "Total Weight: %.2f kg\n", total_weight
        } else {
            printf "No data to calculate averages\n"
        }
    }' "$TEMP_DATA"
}

# Function to find min/max values
calculate_extremes() {
    if [ ! -f "$TEMP_DATA" ] || [ ! -s "$TEMP_DATA" ]; then
        return 1
    fi
    
    print_color "$PURPLE" "üîç Finding extremes..."
    
    awk -F',' '
    BEGIN {
        max_height = 0; min_height = 999999
        max_weight = 0; min_weight = 999999
        max_height_name = ""; min_height_name = ""
        max_weight_name = ""; min_weight_name = ""
    }
    {
        if ($2 > max_height) { max_height = $2; max_height_name = $1 }
        if ($2 < min_height) { min_height = $2; min_height_name = $1 }
        if ($3 > max_weight) { max_weight = $3; max_weight_name = $1 }
        if ($3 < min_weight) { min_weight = $3; min_weight_name = $1 }
    }
    END {
        printf "\nüèÜ Records:\n"
        printf "===========\n"
        printf "Tallest:  %-12s (%.1f m)\n", max_height_name, max_height
        printf "Shortest: %-12s (%.1f m)\n", min_height_name, min_height
        printf "Heaviest: %-12s (%.1f kg)\n", max_weight_name, max_weight
        printf "Lightest: %-12s (%.1f kg)\n", min_weight_name, min_weight
    }' "$TEMP_DATA"
}

# Function to cleanup temporary files
cleanup() {
    if [ -f "$TEMP_DATA" ]; then
        rm "$TEMP_DATA"
    fi
}

# Function to display usage
show_usage() {
    echo "Usage: $0 [options]"
    echo ""
    echo "Options:"
    echo "  -h, --help          Show this help message"
    echo "  -i, --input DIR     Input directory containing JSON files (default: $INPUT_DIR)"
    echo "  -o, --output FILE   Output CSV file (default: $OUTPUT_CSV)"
    echo "  -v, --verbose       Enable verbose output"
    echo "  -s, --stats-only    Show only statistics, don't generate CSV"
    echo "  -c, --clean         Clean previous output files"
    echo ""
    echo "This script processes Pokemon JSON files and generates a summary report"
    echo "with statistics including average height and weight calculations."
}

# Function to clean previous files
clean_files() {
    print_color "$YELLOW" "üßπ Cleaning previous files..."
    [ -f "$OUTPUT_CSV" ] && rm "$OUTPUT_CSV" && echo "   Removed $OUTPUT_CSV"
    [ -f "$ERROR_LOG" ] && rm "$ERROR_LOG" && echo "   Removed $ERROR_LOG"
    [ -f "$TEMP_DATA" ] && rm "$TEMP_DATA" && echo "   Removed temporary data"
    print_color "$GREEN" "‚úÖ Cleanup complete"
}

# Main execution function
main() {
    local verbose=false
    local stats_only=false
    
    # Set up cleanup on exit
    trap cleanup EXIT
    
    # Parse command line arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                show_usage
                exit 0
                ;;
            -i|--input)
                INPUT_DIR="$2"
                shift 2
                ;;
            -o|--output)
                OUTPUT_CSV="$2"
                shift 2
                ;;
            -v|--verbose)
                verbose=true
                shift
                ;;
            -s|--stats-only)
                stats_only=true
                shift
                ;;
            -c|--clean)
                clean_files
                exit 0
                ;;
            *)
                print_color "$RED" "‚ùå Unknown option: $1"
                show_usage
                exit 1
                ;;
        esac
    done
    
    # Display script header
    print_color "$CYAN" "üöÄ Pokemon Data Summary Generator"
    print_color "$CYAN" "================================="
    print_color "$BLUE" "üìÅ Input directory: $INPUT_DIR"
    print_color "$BLUE" "üìÑ Output CSV: $OUTPUT_CSV"
    echo ""
    
    # Check prerequisites
    if ! check_prerequisites; then
        exit 1
    fi
    
    # Check if input directory exists
    if [ ! -d "$INPUT_DIR" ]; then
        log_error "Input directory not found: $INPUT_DIR"
        print_color "$RED" "‚ùå Input directory not found: $INPUT_DIR"
        print_color "$YELLOW" "üí° Make sure you've run the batch processing script first"
        exit 1
    fi
    
    # Initialize error log
    > "$ERROR_LOG"
    
    # Find and process JSON files
    local json_files=("$INPUT_DIR"/*.json)
    local processed_count=0
    local error_count=0
    
    if [ ! -e "${json_files[0]}" ]; then
        log_error "No JSON files found in $INPUT_DIR"
        print_color "$RED" "‚ùå No JSON files found in $INPUT_DIR"
        exit 1
    fi
    
    print_color "$BLUE" "üîç Found ${#json_files[@]} JSON files to process"
    echo ""
    
    # Process each JSON file
    for json_file in "${json_files[@]}"; do
        if extract_pokemon_data "$json_file"; then
            ((processed_count++))
        else
            ((error_count++))
        fi
    done
    
    echo ""
    print_color "$BLUE" "üìä Processing Summary:"
    print_color "$GREEN" "‚úÖ Successfully processed: $processed_count files"
    if [ $error_count -gt 0 ]; then
        print_color "$RED" "‚ùå Errors encountered: $error_count files"
        print_color "$YELLOW" "üìù Check $ERROR_LOG for details"
    fi
    echo ""
    
    # Generate CSV report if not stats-only mode
    if [ "$stats_only" = false ]; then
        if ! generate_csv_report; then
            exit 1
        fi
    fi
    
    # Calculate and display statistics
    calculate_statistics
    calculate_extremes
    
    # Final summary
    echo ""
    if [ $processed_count -gt 0 ]; then
        print_color "$GREEN" "üéâ Report generation completed successfully!"
        if [ "$stats_only" = false ]; then
            print_color "$BLUE" "üìÑ CSV report saved to: $OUTPUT_CSV"
        fi
    else
        print_color "$RED" "‚ùå No data was processed successfully"
        exit 1
    fi
}

# Execute main function with all arguments
main "$@"